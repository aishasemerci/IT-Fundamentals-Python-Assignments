# -*- coding: utf-8 -*-
"""Functions_AYSE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nFg0_422HZT-Oz0Z5v2JapMkU2ddOWRf

<p>Implement a function called <strong>my_func()</strong> that simply prints out <strong>Hello Python! </strong>to the screen and call the function.</p>
"""

def my_func():
  print("Hello Python!")

my_func()

"""<p>Implement a function called <strong>my_func()</strong> that creates a variable <strong>add </strong>which stores the result of adding 10 and 20, and prints out the value of <strong>add</strong>. Don't forget to also call the function!</p>"""

def my_func(): #bunu sorma seklinden cok anlamadim
  add = 10 + 20
  return add
my_func()

"""<p>Implement a function called <strong>my_func()</strong> that takes a single parameter <strong>x </strong>and multiplies it with 10, also returning the result when the function is called.</p>"""

def my_func(x):
  return x * 10

result = my_func(7)
print(result)

"""<p>Implement a function called <strong>my_func()</strong> that takes two parameters <strong>x </strong>and <strong>y </strong>and divides <strong>x </strong>by <strong>y</strong>, also returning the result when the function is called.</p>"""

def my_func(x, y):
  return x / y 

result = my_func(38,19)
print(result)

"""<p>Implement a function called <strong>my_func()</strong> that takes 3 parameters <strong>x</strong>, <strong>y </strong>and <strong>z </strong>and raises <strong>x </strong>to the power of <strong>y </strong>then adds <strong>z</strong>, also returning the result when the function is called.</p>"""

def my_func(x, y, z):
  return (x ** y) + z

result = my_func(3,3,3)
print(result)

"""<p>Implement a function called <strong>my_func()</strong> that takes a single parameter <strong>x </strong>and multiplies it with each element of <strong>range(5)</strong>, also adding each multiplication result to a new (initially empty) list called <strong>my_new_list</strong>. Finally, the list should be printed out to the screen after the function is called.</p>"""

def my_func(x):
  my_new_list = []
  for i in range(5):
    my_new_list.append(x * i)
  return my_new_list
    
result = my_func(2)
print(result)

"""<p>Implement a function called <strong>my_func()</strong> that takes a single parameter <strong>x </strong>(a string)<strong> </strong>and turns each character of the string to uppercase, also returning the result when the function is called.</p>"""

def my_func(x):
  my_string = str(x).upper()
  return my_string

result = my_func("Satoshi Nakamoto")
print(result)

"""<p>Implement a function called <strong>my_func()</strong> that takes a single parameter <strong>x </strong>(a list)<strong> </strong>and eliminates all duplicates from the list, also returning the result when the function is called.</p>"""

def my_func(x):
  my_list = list(set(x))
  return my_list

result = my_func([11, 12, 13, 11, 15, 18, 18, 22, 20, 16, 12])
print(result)

"""<p>Implement a function called <strong>my_func()</strong> that takes a single parameter <strong>x </strong>(a tuple)<strong> </strong>and for each element of the tuple that is greater than 4 it raises that element to the power of 2, also adding it to a new (initially empty) list called <strong>my_new_list</strong>. Finally, the code returns the result when the function is called.</p>"""

def my_func(x):
  my_new_list = []
  for i in tuple(x):
    if i > 4:
      my_new_list.append(i ** 2)
  return my_new_list    
    
result = my_func((2, 3, 5, 6, 4, 8, 9))
print(result)

"""<p>Implement a function called <strong>my_func()</strong> that takes a single parameter <strong>x </strong>(a dictionary) and multiplies the number of elements in the dictionary with the largest key in the dictionary, also returning the result when the function is called.</p>"""

def my_func(x):
  result = len(x.items()) * max(x.keys())
  return result

result = my_func({1: 3, 2: 3, 4: 5, 5: 9, 6: 8, 3: 7, 7: 0})
print(result)

"""<p>Implement a function called <strong>my_func()</strong> that takes a single positional parameter <strong>x </strong>and a default parameter <strong>y </strong>which is equal to 10<strong> </strong>and multiplies the two, also returning the result when the function is called.</p>"""

def my_func(x, y = 10):
  return x * y

result = my_func(5)
print(result)

"""<p>Implement a function called <strong>my_func()</strong> that takes a single positional parameter <strong>x </strong>and two default parameters <strong>y </strong>and <strong>z </strong>which are equal to 100 and 200 respectively,<strong> </strong>and adds them together, also returning the result when the function is called.</p>"""

def my_func(x, y = 100, z = 200):
  return x + y + z

result = my_func(50)
print(result)

"""<p>Implement a function called <strong>my_func()</strong> that takes two default parameters <strong>x </strong>(a list) and <strong>y </strong>(an integer), and returns the element in <strong>x </strong>positioned at index <strong>y</strong>, also printing the result to the screen when called.</p>"""

def my_func(x, y):
  return x[y]

result = my_func(list(range(2,25,2)), 4)
print(result) #result should be 10

"""<p>Implement a function called <strong>my_func()</strong> that takes a positional parameter <strong>x </strong>and a <strong>variable-length</strong> tuple of parameters and returns the result of multiplying <strong>x </strong>with the second element in the tuple, also returning the result when the function is called.</p>"""

#An asterisk (*) is placed before the variable name that holds the values of all nonkeyword variable arguments. This tuple remains empty if no additional arguments are specified during the function call.
def my_func(x, *y): 
  return x * y[1]

result = my_func(5, 10, 20, 30, 50)
print(result)

"""<p>Implement a function called <strong>my_func()</strong> that takes a positional parameter <strong>x </strong>and a <strong>variable-length</strong> dictionary of (keyword) parameters and returns the result of multiplying <strong>x </strong>with the largest value in the dictionary, also returning the result when the function is called.</p>"""

def my_func(x, **y): # **kwargs is used to pass a keyworded, variable-length argument dictionary to a function.
  return x * max(y.values())

result = my_func(10, val1 = 10, val2 = 15, val3 = 20, val4 = 25, val5 = 30)
print(result)

"""<p>Add the correct line(s) of code inside the function in order to get <strong>200 </strong>as a result of calling <strong>my_func()</strong> and have the result printed out to the screen.</p>"""

var = 10

def my_func(x):
  global var
  return var * x
	
my_func(20)

"""<p>Add the correct line(s) of code inside the function in order to get <strong>100 </strong>as a result of calling <strong>my_func()</strong> and have the result printed out to the screen.</p>"""

var = 10

def my_func(x):
	global var
	print(int(x/2) * var)
	
my_func(20)

"""<p>Make the necessary adjustment inside the function in order to get <strong>120 </strong>as a result of calling <strong>my_func()</strong> and have the result printed out to the screen.</p>"""

def my_func(x):
	var = 12
	print(x * var)
	
	
my_func(10)

"""<p>Add the necessary line of code inside the function in order to get <strong>80 </strong>as a result of calling <strong>my_func()</strong> and have the result printed out to the screen.</p>"""

var = 8

def my_func(x):
    global var
    print(x * var)
    var = 12
	
my_func(10)

"""<p>Write code that will import only the <strong>pi </strong>variable from the <strong>math </strong>module and then it will format it in order to have only 4 digits after the floating point. Of course, print out the result to the screen using the <strong>print()</strong> function.</p>"""

from math import pi
print(round(pi, 4))